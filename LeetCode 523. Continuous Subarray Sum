Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.

Example 1:
Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.
Example 2:
Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.

public class ContinuesSubArraySum {

    public boolean checkSubarraySum(int[] nums, int k) {
        if(nums == null || nums.length == 0) {
        	return false;
        } else {
        	int len = nums.length;
        	if(k < 0) {
        	    k = -k;
        	}
        	int sum = 0;
        	for(int i = 0; i < len; i++) {
        		sum = nums[i];
        		for(int j = i + 1; j < len; j++) {
        			sum += nums[j];
        			if(k == 0 && sum == 0) {
        				return true;
        			} else if(k != 0 && sum % k == 0) {
        				return true;
        			}
        		}
        	}
        	return false;
        }
    }
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int[] nums = {23,2,4,6,7};
		int k = 6;
		ContinuesSubArraySum ca = new ContinuesSubArraySum();
		boolean res = ca.checkSubarraySum(nums, k);
		System.out.println(res);
	}

}
